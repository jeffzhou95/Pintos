		     +--------------------------+
       	       	     |		EE461S		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+
---- GROUP ----
>> Fill in the names and email addresses of your group members.
Xingzhe Zhou <xz6429@utexas.edu>
Yihe Liu <liuyihe@utexas.edu>
Menghao Yang <ymh2ee@outlook.com>

---- PRELIMINARIES ----
>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
None
			   ARGUMENT PASSING
			   ================
---- DATA STRUCTURES ----
>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
None

---- ALGORITHMS ----
>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
How you implemented argument parsing?
To implement argument parsing, we seperate tokens first, and then pass it down to start_process(),
load() and setup_stack(). The most important part is the stack setup.

How do you arrange for the elements of argv[] to be in the right order?
After page is installed at the top of virtual memory, we scan the command string and push each token to
the stack. Argument order doesn't matter, because these arguments will be referenced by pointers. After
alignment with 0, we push argv[i] pointers from argv[argc] to argv[0], then push argc, then fake return
address.

How do you avoid overflowing the stack page?
We didn't check the esp pointer until it fails, which will exit the running thread whenever esp is invalid,
 and we handle it in page fault exception.

---- RATIONALE ----
>> A3: Why does Pintos implement strtok_r() but not strtok()?
The difference between strtok_r() and strtok() is that strtok_r() has the save_ptr, which is provided by
the caller. We need to the address of arguments so that we can reach later.

			     SYSTEM CALLS
			     ============
---- DATA STRUCTURES ----
>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

in process.h
/*child_thread is used to indicate the child's status, used in wait-syscall*/
struct child_thread {
    tid_t tid;
    int exit_status;
    struct semaphore exit_lock;
    struct list_elem elem;
};

in thread.h
/* used in file related syscall */
struct proc_file {
  struct file *ptr;
  int fd;
  struct list_elem elem;
};

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

    bool exit;
    //int exit_error;
    struct thread *parent;
    struct list files;
    int fd_count;
    int ret;
    struct file *self;

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    // all children info
    struct list child_threads;
    // self thread info
    struct child_thread* ch;

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
After we use filesys-open() to get the pointer to file, thread stores the fd_count,
 we use this as the current file descriptor and advance the fd_count. Therefore, 
 file descriptor is unique within a single process.


---- ALGORITHMS ----
>> B3: Describe your code for reading and writing user data from the
>> kernel.
Code for reading and writing data are very similar. Take writing for example,
if fd is STDOUT_FILENO, directly use putbuf() to write data to output, otherwise, 
use fd to get the actuall file pointer, and then use file_write method to write 
data to file. Additionally, don't forget to use lock when dealing with file.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
For a full page of of data, the least number of inspection is 1. Because pagedir_get_page() returns 
a page head back, which can caompared with the address. Because it can hold a full page of 
data, we only need to inspect it once. The greatest number is 4096, when these data is not 
continuous.

For 2 bytes of data, the least number is 1, the greatest number is 2 with the same reason.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

1. Whenever the parent create a new child, the child's information will
   be stored as an element of the list in the parent's thread structure
2. Each child has a semaphore whose initial value is 0
3. When the parent wait for a child, it calls sema_down(child_sema)
4. When the child exit, we will sema_up the semaphore so that its
   parent can return from the `wait()`

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

1. design and error-handling
* We create a function to check whether the address is valid or not
  using `is_user_vaddr` and `pagedir_get_page`,
  if it is invalid, the process will exit(-1)
* `syscall_handler` checks the validation of `esp` at first
* When we parse the arguments, we will check the validation of each
  argument
2. free allocated resources
* We prefer to check the validation before allocating resources which
  helps us to worry less about freeing resources
* Before the program exits, it will release the lock and sema_up(sema)

For example, in SYS_READ, we use `parse_argus` to parse arguments and
check the validation of each points, before actually opening the file.
We check whether an error occurs in the function, if yes then release
the lock and quit safety.

---- SYNCHRONIZATION ----
>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

* We use `filesys_open` to test whether the file exist or not. If the
  file does not exist, `exec` will return -1. Otherwise, `exec` will
  call `process_execute` to run the user program and return tid_t

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

* If P calls wait(C) before C exits, P will be blocked because semaphore
  inits as 0 and sema_down(sema) block the process
* If C exits, C calls sema_up(sema) and P will be blocked by sema_down(sema)
  any more.
* After wait(C), resources such as semaphore will be released.
* All resources are released after exit().
* If P terminates without waiting, C can sema_up and exit as well

---- RATIONALE ----
>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
We store arguments in kernel stack and access to these data before we validate (BadAddr).

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
Advantages: Because we use linklist as the data structure to store file descriptors, 
so it is easy to delete and add items.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
We didn't change it.

			   SURVEY QUESTIONS
			   ================
Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.
>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
>> Any other comments?
